import { createHash } from '../utils.js';
import { faker } from '@faker-js/faker';

class MockingService {
  generateUsers(num) {
    const users = [];
    for (let i = 0; i < num; i++) {
      const user = {
        first_name: faker.person.firstName(),
        last_name: faker.person.lastName(),
        email: faker.internet.email(),
        age: faker.number.int({ min: 18, max: 80 }),
        password: createHash('coder123'), // Contraseña encriptada
        role: faker.helpers.arrayElement(['user', 'admin']),
        products: [], // Array vacío para productos
      };
      users.push(user);
    }
    return users;
  }

  generateProducts(num) {
    const products = [];
    for (let i = 0; i < num; i++) {
      const product = {
        nombre: faker.commerce.productName(),
        descripcion: faker.commerce.productDescription(),
        precio: faker.number.int({ min: 10, max: 1000 }),
        stock: faker.number.int({ min: 0, max: 100 }),
        category: faker.commerce.department(),
      };
      products.push(product);
    }
    return products;
  }
}

export default new MockingService();



import { Router } from 'express';
import MockingService from '../services/mocking.js';
import UsersDAO from '../services/daos/users.dao.js';
import ProductDAO from '../services/daos/product.dao.js';
import UserDTO from '../services/dto/users.dto.js';
import ProductDTO from '../services/dto/product.dto.js';
import { faker } from '@faker-js/faker';

const router = Router();

// GET /api/mocks/mockingusers
router.get('/mockingusers', async (req, res) => {
  try {
    const users = MockingService.generateUsers(50);
    // Simulamos el formato de MongoDB con DTO
    const usersDTO = users.map(user => new UserDTO({
      ...user,
      _id: faker.database.mongodbObjectId(), // Simula un ObjectId de MongoDB
    }));
    res.status(200).json({
      status: 'success',
      payload: usersDTO,
    });
  } catch (error) {
    console.error('Error al generar usuarios simulados:', error);
    res.status(500).json({
      status: 'error',
      message: 'Error al generar usuarios simulados',
      error: error.message,
    });
  }
});

// GET /api/mocks/mockingproducts
router.get('/mockingproducts', async (req, res) => {
  try {
    const products = MockingService.generateProducts(50);
    // Simulamos el formato de MongoDB con DTO
    const productsDTO = products.map(product => new ProductDTO({
      ...product,
      _id: faker.database.mongodbObjectId(), // Simula un ObjectId de MongoDB
    }));
    res.status(200).json({
      status: 'success',
      payload: productsDTO,
    });
  } catch (error) {
    console.error('Error al generar productos simulados:', error);
    res.status(500).json({
      status: 'error',
      message: 'Error al generar productos simulados',
      error: error.message,
    });
  }
});

// POST /api/mocks/generateData
router.post('/generateData', async (req, res) => {
  try {
    const { users = 0, products = 0 } = req.body;

    if (!Number.isInteger(users) || !Number.isInteger(products) || users < 0 || products < 0) {
      return res.status(400).json({
        status: 'error',
        message: 'Los parámetros "users" y "products" deben ser números enteros no negativos',
      });
    }

    // Generar e insertar usuarios
    const mockUsers = MockingService.generateUsers(users);
    const insertedUsers = [];
    for (const user of mockUsers) {
      const createdUser = await UsersDAO.create(user);
      insertedUsers.push(new UserDTO(createdUser));
    }

    // Generar e insertar productos
    const mockProducts = MockingService.generateProducts(products);
    const insertedProducts = [];
    for (const product of mockProducts) {
      const createdProduct = await ProductDAO.create(product);
      insertedProducts.push(new ProductDTO(createdProduct));
    }

    res.status(201).json({
      status: 'success',
      message: 'Datos generados e insertados correctamente',
      users: insertedUsers,
      products: insertedProducts,
    });
  } catch (error) {
    console.error('Error al generar e insertar datos:', error);
    res.status(500).json({
      status: 'error',
      message: 'Error al generar e insertar datos',
      error: error.message,
    });
  }
});

export default router;